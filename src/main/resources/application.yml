server:
  port: 8888

spring:
  application:
    name: config-service
  # 파일시스템에서 환경설정 불러오려면 아래와 같이 작성하고, cloud.config.server.native.search-locations 도 추가해주면 됩니다.
  profiles:
    active: native
  cloud:
    config:
      server:
        #git:
          #uri: file://C:\Users\Charlie\Desktop\spring-cloud-config
          # remote config setting
          #uri: https://github.com/spring-personal-study/spring-cloud-config
          #username: [your username]
          #password: [your password]
          # 위 설정정보를 잘 가지고 왔는지 http://localhost:8888/ecommerce/default 또는 ...:8888/ecommerce/dev 또는 /ecommerce/native 에서 확인할 수 있습니다.
        native:
          search-locations: file:///${user.home}/Desktop/spring-cloud-config # 이 디렉터리 하위의 설정파일 (예를 들어 ecommerce.yml)을 읽어냅니다.
                                                      # 이때 참조되는 파일 이름은 user-service 등의 bootstrap.yml 에 작성된, spring.cloud.config.name 에 설정된 값에 따라 달라집니다.
                                                      # macOS 라면 file://${user.home}으로 작성해주세요.

# 참고: file://C:\Users\Charlie\Desktop\spring-cloud-config 의 정보는 아래와 같습니다.
# (spring-cloud-config 디렉터리에 존재하는 ecommerce.yml 파일에 아래와 같은 정보가 있습니다,
# 단 spring.profiles.active 설정시 (예를들어 spring.profiles.active=dev 로 설정) ecommerce-dev.yml 파일로 이름을 변경해주어야 합니다.)
#  실무가 아닌 실습 프로젝트이므로 아래와 같이 주석처리하여 제공합니다. 자세한 내용은 resources/img.png 를 참조하세요.
#token:
#  expiration_time: 86400000
#  secret: secretusertoken7890secretusertoken7890secretusertoken7890secretusertoken7890secretusertoken7890secretusertoken7890secretusertoken7890secretusertoken7890
#
#gateway:
#  ip: localhost